def greedy_vertex_cover(n, m, edges):
    # Create a set for the vertex cover
    vertex_cover = set()
    # Create an adjacency list for the graph
    graph = {i: set() for i in range(n)}
    for u, v in edges:
        graph[u].add(v)
        graph[v].add(u)

    # While there are edges in the graph
    while edges:
        # Pick an arbitrary edge
        u, v = edges[0]
        # Add both endpoints to the vertex cover
        vertex_cover.add(u)
        vertex_cover.add(v)
        # Remove all edges incident to either u or v
        edges = [edge for edge in edges if u not in edge and v not in edge]

    return list(vertex_cover)

# Test Case 1
n1 = 5
m1 = 6
edges1 = [(0, 1), (0, 2), (1, 2), (1, 3), (2, 4), (3, 4)]
output1 = greedy_vertex_cover(n1, m1, edges1)
print("Vertex Cover Test Case 1:", output1)

# Test Case 2
n2 = 4
m2 = 4
edges2 = [(0, 1), (0, 2), (1, 2), (2, 3)]
output2 = greedy_vertex_cover(n2, m2, edges2)
print("Vertex Cover Test Case 2:", output2)
