def quick_sort(arr, low, high):
    if low < high:
        # Partitioning index
        pi = partition(arr, low, high)

        # Sort elements before and after partition
        quick_sort(arr, low, pi - 1)
        quick_sort(arr, pi + 1, high)

    # Display the current state of the array
    print(arr)

def partition(arr, low, high):
    # Choose the first element as pivot
    pivot = arr[low]
    i = low + 1

    for j in range(low + 1, high + 1):
        if arr[j] < pivot:
            arr[i], arr[j] = arr[j], arr[i]
            i += 1

    # Place the pivot in the correct position
    arr[low], arr[i - 1] = arr[i - 1], arr[low]
    return i - 1

# Test Case 1
print("Test Case 1:")
array1 = [10, 16, 8, 12, 15, 6, 3, 9, 5]
print("Initial array:", array1)
quick_sort(array1, 0, len(array1) - 1)
print("Sorted array:", array1)

print("\nTest Case 2:")
# Test Case 2
array2 = [12, 4, 78, 23, 45, 67, 89, 1]
print("Initial array:", array2)
quick_sort(array2, 0, len(array2) - 1)
print("Sorted array:", array2)

print("\nTest Case 3:")
# Test Case 3
array3 = [38, 27, 43, 3, 9, 82, 10]
print("Initial array:", array3)
quick_sort(array3, 0, len(array3) - 1)
print("Sorted array:", array3)

print("\nTest Case 4:")
# Additional Test Case
array4 = [19, 72, 35, 46, 58, 91, 22, 31]
print("Initial array:", array4)
quick_sort(array4, 0, len(array4) - 1)
print("Sorted array:", array4)

print("\nTest Case 5:")
# Another Test Case
array5 = [31, 23, 35, 27, 11, 21, 15, 28]
print("Initial array:", array5)
quick_sort(array5, 0, len(array5) - 1)
print("Sorted array:", array5)

print("\nTest Case 6:")
# Additional Test Case
array6 = [22, 34, 25, 36, 43, 67, 52, 13, 65, 17]
print("Initial array:", array6)
quick_sort(array6, 0, len(array6) - 1)
print("Sorted array:", array6)
