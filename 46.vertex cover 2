def vertex_cover_max_degree(n, edges):
    from collections import defaultdict
    
    # Create an adjacency list to represent the graph
    graph = defaultdict(set)
    for u, v in edges:
        graph[u].add(v)
        graph[v].add(u)

    # This will hold the vertices included in the vertex cover
    vertex_cover = set()

    # While there are edges in the graph
    while edges:
        # Find the vertex with the maximum degree
        degree = {node: len(graph[node]) for node in graph}
        max_degree_vertex = max(degree, key=degree.get)

        # Add the vertex with the highest degree to the vertex cover
        vertex_cover.add(max_degree_vertex)

        # Remove all edges covered by this vertex
        for neighbor in graph[max_degree_vertex]:
            if (max_degree_vertex, neighbor) in edges:
                edges.remove((max_degree_vertex, neighbor))
            if (neighbor, max_degree_vertex) in edges:
                edges.remove((neighbor, max_degree_vertex))

        # Remove the vertex from the graph
        del graph[max_degree_vertex]

    return list(vertex_cover)

# Test Case 1
n1 = 6
m1 = 7
edges1 = [(0, 1), (0, 2), (1, 3), (1, 4), (2, 4), (3, 5), (4, 5)]
result1 = vertex_cover_max_degree(n1, edges1)
print("Test Case 1 - Vertex Cover:", result1)

# Test Case 2
n2 = 5
m2 = 5
edges2 = [(0, 1), (0, 2), (0, 3), (1, 4), (2, 4)]
result2 = vertex_cover_max_degree(n2, edges2)
print("Test Case 2 - Vertex Cover:", result2)
