import sys

def prim_mst(graph):
    num_vertices = len(graph)
    selected_nodes = [False] * num_vertices
    edge_count = 0
    selected_nodes[0] = True  # Start from the first vertex

    print("Edge \tWeight")
    
    while edge_count < num_vertices - 1:
        minimum = sys.maxsize
        x = 0
        y = 0
        
        for i in range(num_vertices):
            if selected_nodes[i]:
                for j in range(num_vertices):
                    if not selected_nodes[j] and graph[i][j]:
                        # Check if the edge is less than the minimum found so far
                        if minimum > graph[i][j]:
                            minimum = graph[i][j]
                            x = i
                            y = j
        
        selected_nodes[y] = True
        edge_count += 1
        print(f"{x} - {y} \t{graph[x][y]}")

# Example usage:
if __name__ == "__main__":
    # Graph represented as an adjacency matrix
    graph = [
        [0, 2, 0, 6, 0],
        [2, 0, 3, 8, 5],
        [0, 3, 0, 0, 7],
        [6, 8, 0, 0, 9],
        [0, 5, 7, 9, 0]
    ]

    prim_mst(graph)
