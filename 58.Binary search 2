def binary_search(arr, target):
    left, right = 0, len(arr) - 1
    comparisons = 0
    
    while left <= right:
        mid = left + (right - left) // 2
        comparisons += 1  # Count the comparison made
        
        if arr[mid] == target:
            return mid, comparisons  # Return index and comparison count
        elif arr[mid] < target:
            left = mid + 1
        else:
            right = mid - 1
            
    return -1, comparisons  # Return -1 if not found and comparisons

# Test the function with the provided test cases

# Test case 1
N1 = 9
arr1 = [5, 10, 15, 20, 25, 30, 35, 40, 45]
search_key1 = 20
index1, comparisons1 = binary_search(arr1, search_key1)
print(f"Input: N={N1}, a={arr1}, search key={search_key1}")
print(f"Output: {index1}, Comparisons: {comparisons1}")

# Test case 2
N2 = 6
arr2 = [10, 20, 30, 40, 50, 60]
search_key2 = 50
index2, comparisons2 = binary_search(arr2, search_key2)
print(f"Input: N={N2}, a={arr2}, search key={search_key2}")
print(f"Output: {index2}, Comparisons: {comparisons2}")

# Test case 3
N3 = 7
arr3 = [21, 32, 40, 54, 65, 76, 87]
search_key3 = 32
index3, comparisons3 = binary_search(arr3, search_key3)
print(f"Input: N={N3}, a={arr3}, search key={search_key3}")
print(f"Output: {index3}, Comparisons: {comparisons3}")
