def find_mst_weight_and_edges(n, edges):
    # Kruskal's algorithm to find the MST and its weight
    parent = list(range(n))
    rank = [0] * n
    
    def find(x):
        if parent[x] != x:
            parent[x] = find(parent[x])
        return parent[x]
    
    def union(x, y):
        rootX = find(x)
        rootY = find(y)
        if rootX != rootY:
            if rank[rootX] > rank[rootY]:
                parent[rootY] = rootX
            elif rank[rootX] < rank[rootY]:
                parent[rootX] = rootY
            else:
                parent[rootY] = rootX
                rank[rootX] += 1

    # Sort edges by weight
    edges.sort(key=lambda x: x[2])
    mst_edges = []
    total_weight = 0

    for u, v, weight in edges:
        if find(u) != find(v):
            union(u, v)
            mst_edges.append((u, v, weight))
            total_weight += weight

    return total_weight, mst_edges

def is_mst_unique(n, edges, given_mst):
    # Get the weight and edges of the MST
    total_weight, mst_edges = find_mst_weight_and_edges(n, edges)

    # Check if the given MST matches the computed MST weight and edges
    given_mst_weight = sum(edge[2] for edge in given_mst)
    
    if given_mst_weight != total_weight:
        return False, []

    # Check for alternative edges to find if the MST is unique
    edge_weights = {edge: weight for edge, weight in edges}
    included_edges = set((min(u, v), max(u, v), weight) for u, v, weight in given_mst)

    alternative_mst = []
    for u, v, weight in edges:
        if (min(u, v), max(u, v), weight) not in included_edges:
            alternative_mst.append((u, v, weight))

    # Check if we can form an alternative MST
    alternative_total_weight, alternative_edges = find_mst_weight_and_edges(n, alternative_mst)
    
    if alternative_total_weight == total_weight:
        return False, alternative_edges

    return True, []

# Example usage
test_case_1 = {
    "n": 4,
    "edges": [(0, 1, 10), (0, 2, 6), (0, 3, 5), (1, 3, 15), (2, 3, 4)],
    "given_mst": [(2, 3, 4), (0, 3, 5), (0, 1, 10)],
}

test_case_2 = {
    "n": 5,
    "edges": [(0, 1, 1), (0, 2, 1), (1, 3, 2), (2, 3, 2), (3, 4, 3), (4, 2, 3)],
    "given_mst": [(0, 1, 1), (0, 2, 1), (1, 3, 2), (3, 4, 3)],
}

for i, test_case in enumerate([test_case_1, test_case_2], 1):
    unique, alternative = is_mst_unique(test_case["n"], test_case["edges"], test_case["given_mst"])
    print(f"Test Case {i}:")
    print("Is the given MST unique?", unique)
    if not unique:
        print("Another possible MST:", alternative)
