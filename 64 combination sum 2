def combinationSum(candidates, target):
    def backtrack(start, path, remaining):
        if remaining == 0:
            # Found a valid combination
            result.append(path)
            return
        elif remaining < 0:
            # Exceeded the target sum
            return
        
        for i in range(start, len(candidates)):
            # Include the current candidate and move forward
            backtrack(i, path + [candidates[i]], remaining - candidates[i])

    result = []
    candidates.sort()  # Optional: sorting can help with optimization
    backtrack(0, [], target)
    return result

# Example usage:
candidates = [2, 3, 6, 7]
target = 7
print(combinationSum(candidates, target))
