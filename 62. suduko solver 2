def solveSudoku(board):
    def isValid(num, row, col):
        # Check if the number is not in the current row
        for c in range(9):
            if board[row][c] == num:
                return False
        # Check if the number is not in the current column
        for r in range(9):
            if board[r][col] == num:
                return False
        # Check if the number is not in the current 3x3 box
        boxRow = (row // 3) * 3
        boxCol = (col // 3) * 3
        for r in range(boxRow, boxRow + 3):
            for c in range(boxCol, boxCol + 3):
                if board[r][c] == num:
                    return False
        return True

    def backtrack():
        for row in range(9):
            for col in range(9):
                if board[row][col] == '.':
                    for num in map(str, range(1, 10)):  # Try numbers 1 to 9
                        if isValid(num, row, col):
                            board[row][col] = num  # Place the number
                            if backtrack():  # Recur to see if it leads to a solution
                                return True
                            board[row][col] = '.'  # Reset the cell (backtrack)
                    return False  # No valid number found, backtrack
        return True  # Solved

    backtrack()
    return board

# Example usage:
board = [
    ["5", "3", ".", ".", "7", ".", ".", ".", "."],
    ["6", ".", ".", "1", "9", "5", ".", ".", "."],
    [".", "9", "8", ".", ".", ".", ".", "6", "."],
    ["8", ".", ".", ".", "6", ".", ".", ".", "3"],
    ["4", ".", ".", "8", ".", "3", ".", ".", "1"],
    ["7", ".", ".", ".", "2", ".", ".", ".", "6"],
    [".", "6", ".", ".", ".", ".", "2", "8", "."],
    [".", ".", ".", "4", "1", "9", ".", ".", "5"],
    [".", ".", ".", ".", "8", ".", ".", "7", "9"]
]

solved_board = solveSudoku(board)

# Print the solved board
for row in solved_board:
    print(row)
