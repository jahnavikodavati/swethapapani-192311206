class DisjointSet:
    def __init__(self, n):
        self.parent = list(range(n))
        self.rank = [0] * n

    def find(self, u):
        if self.parent[u] != u:
            self.parent[u] = self.find(self.parent[u])
        return self.parent[u]

    def union(self, u, v):
        root_u = self.find(u)
        root_v = self.find(v)
        
        if root_u != root_v:
            if self.rank[root_u] > self.rank[root_v]:
                self.parent[root_v] = root_u
            elif self.rank[root_u] < self.rank[root_v]:
                self.parent[root_u] = root_v
            else:
                self.parent[root_v] = root_u
                self.rank[root_u] += 1


def boruvkas_algorithm(vertices, edges):
    num_vertices = len(vertices)
    ds = DisjointSet(num_vertices)
    
    mst_edges = []
    total_cost = 0

    while len(mst_edges) < num_vertices - 1:
        cheapest = [-1] * num_vertices
        
        # Find the cheapest edge for each component
        for i, (u, v, weight) in enumerate(edges):
            set_u = ds.find(u)
            set_v = ds.find(v)

            if set_u != set_v:
                if cheapest[set_u] == -1 or cheapest[set_u][2] > weight:
                    cheapest[set_u] = (u, v, weight)
                if cheapest[set_v] == -1 or cheapest[set_v][2] > weight:
                    cheapest[set_v] = (u, v, weight)

        # Add the cheapest edges to the MST
        for edge in cheapest:
            if edge:
                u, v, weight = edge
                if ds.find(u) != ds.find(v):
                    ds.union(u, v)
                    mst_edges.append(edge)
                    total_cost += weight

    return mst_edges, total_cost


# Example usage
if __name__ == "__main__":
    vertices = [0, 1, 2, 3, 4]
    edges = [
        (0, 1, 10),
        (0, 2, 6),
        (0, 3, 5),
        (1, 3, 15),
        (2, 3, 4),
        (1, 4, 7),
        (3, 4, 8)
    ]
    
    mst_edges, total_cost = boruvkas_algorithm(vertices, edges)
    
    print("Minimum Cost Spanning Tree edges:")
    for edge in mst_edges:
        print(edge)
    print("Total cost of the MST:", total_cost)
